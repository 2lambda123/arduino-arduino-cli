// This file is part of arduino-cli.
//
// Copyright 2020 ARDUINO SA (http://www.arduino.cc/)
//
// This software is released under the GNU General Public License version 3,
// which covers the main part of arduino-cli.
// The terms of this license can be found at:
// https://www.gnu.org/licenses/gpl-3.0.en.html
//
// You can be released from the requirements of the above licenses by purchasing
// a commercial license. Buying such a license is mandatory if you want to
// modify or otherwise use the software for commercial activities involving the
// Arduino software without disclosing the source code of your own applications.
// To purchase a commercial license, send an email to license@arduino.cc.

syntax = "proto3";

package cc.arduino.cli.commands.v1;

option go_package = "github.com/arduino/arduino-cli/rpc/cc/arduino/cli/commands/v1;commands";

// Configuration to apply to the given instance.
// Any missing field will be kept at the default value.
message Configuration {
  message Directories {
    message Builtin {
      // The directory where the built-in tools are installed
      optional string tools = 1;
      // The directory where the built-in libraries are installed
      optional string libraries = 2;
    }
    // Data directory
    optional string data = 1;
    // User directory
    optional string user = 2;
    // Downloads directory
    optional string downloads = 3;
    // The directory where the built-in resources are installed
    optional Builtin builtin = 4;
  };
  message Network {
    // Extra user-agent information to be appended in network requests
    optional string extra_user_agent = 1;
    // The proxy to use for network requests
    optional string proxy = 2;
  };
  message Sketch {
    // Set to true to always export binaries to the sketch directory
    optional bool always_export_binaries = 1;
  }
  message BuildCache {
    // The minimum number of compilations before the cache is purged
    optional uint32 compilations_before_purge = 1;
    // Time to live of the cache in seconds
    optional uint64 ttl_secs = 2;
  }
  message BoardManager {
    // Additional URLs to be used for the board manager
    repeated string additional_urls = 1;
  }
  message Daemon {
    // The TCP port of the daemon
    optional string port = 1;
  }
  message Output {
    // Set to true to disable coloring of the output
    optional bool no_color = 1;
  }
  message Logging {
    // The logging level
    optional string level = 1;
    // The logging format
    optional string format = 2;
    // The logging file
    optional string file = 3;
  }
  message Library {
    // Set to true to enable library installation from zip archives or git
    // repositories
    optional bool enable_unsafe_install = 1;
  }
  message Updater {
    // Set to true to enable notifications for updates
    optional bool enable_notification = 1;
  }

  Directories directories = 1;
  Network network = 2;
  Sketch sketch = 3;
  BuildCache build_cache = 4;
  BoardManager board_manager = 5;
  Daemon daemon = 6;
  Output output = 7;
  Logging logging = 8;
  Library library = 9;
  Updater updater = 10;

  optional string locale = 100;
}

message ConfigurationGetRequest {}

message ConfigurationGetResponse {
  // The current configuration
  Configuration configuration = 1;
}

message ConfigurationSaveRequest { string format = 1; }

message ConfigurationSaveResponse { string encoded_settings = 1; }

message ConfigurationOpenRequest {
  string format = 1;
  string encoded_settings = 2;
}

message ConfigurationOpenResponse {}

message SettingsGetValueRequest {
  // The key to get
  string key = 1;
}

message SettingsGetValueResponse {
  // The value of the key as a JSON string (no objects, only scalar or array of
  // scalars are allowed)
  string value_json = 1;
}

message SettingsSetValueRequest {
  // The key to change
  string key = 1;
  // The new value (no objects, only scalar or array of scalars are allowed)
  string value_json = 2;
}

message SettingsSetValueResponse {}

message SettingsEnumerateRequest {}

message SettingsEnumerateResponse {
  message Entry {
    // The key
    string key = 1;
    // The key type
    string type = 2;
  }

  // The list of key/value pairs
  repeated Entry entries = 1;
}
