syntax = "proto3";

package arduino;

option go_package = "github.com/arduino/arduino-cli/rpc";

import "common.proto";
import "board.proto";
import "compile.proto";
import "core.proto";

// The main Arduino Platform Service
service ArduinoCore {
  // BOOTSTRAP COMMANDS
  //-------------------

  // Start a new instance of the Arduino Core Service
  rpc Init(InitReq) returns (InitResp) {}

  // Destroy an instance of the Arduino Core Service
  rpc Destroy(DestroyReq) returns (DestroyResp) {}

  // BOARD COMMANDS
  // --------------

  // Requests details about a board
  rpc BoardDetails(BoardDetailsReq) returns (BoardDetailsResp);

  rpc Compile(CompileReq) returns (stream CompileResp);

  rpc PlatformInstall(PlatformInstallReq) returns (stream PlatformInstallResp);

  rpc PlatformDownload(PlatformDownloadReq) returns (stream PlatformDownloadResp);

  rpc PlatformUninstall(PlatformUninstallReq) returns (PlatformUninstallResp);

  rpc PlatformUpgrade(PlatformUpgradeReq) returns (stream PlatformUpgradeResp);
}

// Configuration contains information to instantiate an Arduino Platform Service
message Configuration {
  // dataDir represents the current root of the arduino tree (defaulted to
  // `$HOME/.arduino15` on linux).
  string dataDir = 1;

  // sketchbookDir represents the current root of the sketchbooks tree
  // (defaulted to `$HOME/Arduino`).
  string sketchbookDir = 2;

  // ArduinoIDEDirectory is the directory of the Arduino IDE if the CLI runs
  // together with it.
  string downloadsDir = 3;

  // BoardManagerAdditionalUrls contains the additional URL for 3rd party
  // packages
  repeated string boardManagerAdditionalUrls = 4;
}

message InitReq {
  Configuration configuration = 1;
  bool library_manager_only = 2;
}

message InitResp {
  Instance instance = 1;
}

message DestroyReq { Instance instance = 1; }
message DestroyResp {}
