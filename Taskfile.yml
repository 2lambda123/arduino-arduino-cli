version: "3"

includes:
  dist: ./DistTasks.yml

tasks:
  docs:gen:commands:
    desc: Generate command reference files
    deps:
      - task: go:cli-docs
    cmds:
      - |
        echo "WARNING: this task is deprecated. Use go:cli-docs instead"

  docs:gen:protobuf:
    desc: Generate markdown contents for protobuffers
    cmds:
      - '{{ default "protoc" .PROTOC_BINARY }} --doc_out=./docs/rpc --doc_opt=markdown,commands.md --proto_path=rpc ./rpc/cc/arduino/cli/commands/v1/*.proto'
      - '{{ default "protoc" .PROTOC_BINARY }} --doc_out=./docs/rpc --doc_opt=markdown,monitor.md --proto_path=rpc ./rpc/cc/arduino/cli/monitor/v1/*.proto'
      - '{{ default "protoc" .PROTOC_BINARY }} --doc_out=./docs/rpc --doc_opt=markdown,settings.md --proto_path=rpc ./rpc/cc/arduino/cli/settings/v1/*.proto'
      - '{{ default "protoc" .PROTOC_BINARY }} --doc_out=./docs/rpc --doc_opt=markdown,debug.md --proto_path=rpc ./rpc/cc/arduino/cli/debug/v1/*.proto'

  docs:gen:
    desc: Generate documentation files
    deps:
      - task: docs:generate
    cmds:
      - |
        echo "WARNING: this task is deprecated. Use docs:generate instead"

  docs:generate:
    desc: Create all generated documentation content
    deps:
      - task: go:cli-docs
      - task: protoc:docs
    cmds:
      - task: general:format-prettier

  docs:build:
    desc: Build documentation website contents
    deps:
      - task: website:check
    cmds:
      - |
        echo "WARNING: this task is deprecated. Use website:check instead"

  docs:serve:
    desc: Run documentation website locally
    deps:
      - task: website:serve
    cmds:
      - |
        echo "WARNING: this task is deprecated. Use website:serve instead"

  docs:check-links:
    desc: Verifies there are no dead links in documentation
    deps:
      - task: markdown:check-links
    cmds:
      - |
        echo "WARNING: this task is deprecated. Use markdown:check-links instead"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-prettier-formatting-task/Taskfile.yml
  general:format-prettier:
    desc: Format all supported files with Prettier
    cmds:
      - npx prettier --write .

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/deploy-cobra-mkdocs-versioned-poetry/Taskfile.yml
  go:cli-docs:
    desc: Generate command line interface reference documentation
    dir: ./docsgen
    cmds:
      # Command examples use os.Args[0] so the docs generation binary must have the same filename as the project
      - go build -o {{.PROJECT_NAME}}{{exeExt}}
      # The binary is invoked like this instead of `./{{.PROJECT_NAME}}` to remove the `./` chars from the examples
      - PATH=. {{.PROJECT_NAME}} ../docs/commands

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:check-links:
    desc: Check for broken links
    deps:
      - task: docs:generate
    cmds:
      - |
        if [[ "{{.OS}}" == "Windows_NT" ]]; then
          # npx --call uses the native shell, which makes it too difficult to use npx for this application on Windows,
          # so the Windows user is required to have markdown-link-check installed and in PATH.
          if ! which markdown-link-check &>/dev/null; then
            echo "markdown-link-check not found or not in PATH. Please install: https://github.com/tcort/markdown-link-check#readme"
            exit 1
          fi
          # Default behavior of the task on Windows is to exit the task when the first broken link causes a non-zero
          # exit status, but it's better to check all links before exiting.
          set +o errexit
          STATUS=0
          # Using -regex instead of -name to avoid Task's behavior of globbing even when quoted on Windows
          # The odd method for escaping . in the regex is required for windows compatibility because mvdan.cc/sh gives
          # \ characters special treatment on Windows in an attempt to support them as path separators.
          for file in $(find . -regex ".*[.]md"); do
            markdown-link-check \
              --quiet \
              --config "./.markdown-link-check.json" \
              "$file"
            STATUS=$(( $STATUS + $? ))
          done
          exit $STATUS
        else
          npx --package=markdown-link-check --call='
            STATUS=0
            for file in $(find . -regex ".*[.]md"); do
              markdown-link-check \
                --quiet \
                --config "./.markdown-link-check.json" \
                "$file"
              STATUS=$(( $STATUS + $? ))
            done
            exit $STATUS
          '
        fi

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:fix:
    desc: Automatically correct linting violations in Markdown files where possible
    cmds:
      - npx markdownlint-cli --fix "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:lint:
    desc: Check for problems in Markdown files
    cmds:
      - npx markdownlint-cli "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/poetry-task/Taskfile.yml
  poetry:install-deps:
    desc: Install dependencies managed by Poetry
    cmds:
      - poetry install --no-root

  protoc:
    desc: Lint, format and compile protobuf definitions
    deps:
      - protoc:check
      - protoc:format
      - protoc:compile

  protoc:compile:
    desc: Compile protobuf definitions
    cmds:
      - '{{ default "protoc" .PROTOC_BINARY }} --proto_path=rpc --go_out=./rpc --go_opt=paths=source_relative --go-grpc_out=./rpc --go-grpc_opt=paths=source_relative ./rpc/cc/arduino/cli/commands/v1/*.proto'
      - '{{ default "protoc" .PROTOC_BINARY }} --proto_path=rpc --go_out=./rpc --go_opt=paths=source_relative --go-grpc_out=./rpc --go-grpc_opt=paths=source_relative ./rpc/cc/arduino/cli/monitor/v1/*.proto'
      - '{{ default "protoc" .PROTOC_BINARY }} --proto_path=rpc --go_out=./rpc --go_opt=paths=source_relative --go-grpc_out=./rpc --go-grpc_opt=paths=source_relative ./rpc/cc/arduino/cli/settings/v1/*.proto'
      - '{{ default "protoc" .PROTOC_BINARY }} --proto_path=rpc --go_out=./rpc --go_opt=paths=source_relative --go-grpc_out=./rpc --go-grpc_opt=paths=source_relative ./rpc/cc/arduino/cli/debug/v1/*.proto'

  protoc:docs:
    desc: Generate docs for protobuf definitions
    cmds:
      - '{{ default "protoc" .PROTOC_BINARY }} --doc_out=./docs/rpc --doc_opt=markdown,commands.md --proto_path=rpc ./rpc/cc/arduino/cli/commands/v1/*.proto'
      - '{{ default "protoc" .PROTOC_BINARY }} --doc_out=./docs/rpc --doc_opt=markdown,monitor.md --proto_path=rpc ./rpc/cc/arduino/cli/monitor/v1/*.proto'
      - '{{ default "protoc" .PROTOC_BINARY }} --doc_out=./docs/rpc --doc_opt=markdown,settings.md --proto_path=rpc ./rpc/cc/arduino/cli/settings/v1/*.proto'
      - '{{ default "protoc" .PROTOC_BINARY }} --doc_out=./docs/rpc --doc_opt=markdown,debug.md --proto_path=rpc ./rpc/cc/arduino/cli/debug/v1/*.proto'

  protoc:check:
    desc: Perform linting of the protobuf definitions
    cmds:
      - buf lint rpc

  protoc:format:
    desc: Perform formatting of the protobuf definitions
    cmds:
      - clang-format -i rpc/cc/arduino/cli/*/*/*.proto

  build:
    desc: Build the project
    cmds:
      - go build -v {{.LDFLAGS}}

  test:
    desc: Run the full testsuite, `legacy` will be skipped
    cmds:
      - task: test-unit
      - task: test-integration

  test-unit:
    desc: Run unit tests only
    cmds:
      - go test -short -run '{{ default ".*" .TEST_REGEX }}' {{ default "-v" .GOFLAGS }} -coverprofile=coverage_unit.txt {{ default .DEFAULT_TARGETS .TARGETS }} {{.TEST_LDFLAGS}}

  test-integration:
    desc: Run integration tests only
    cmds:
      - poetry install --no-root
      - poetry run pytest test

  test-legacy:
    desc: Run tests for the `legacy` package
    cmds:
      - go test {{ default "-v -failfast" .GOFLAGS }} -coverprofile=coverage_legacy.txt ./legacy/...

  test-unit-race:
    desc: Run unit tests only with race condition detection
    cmds:
      - go test -short -race {{ default "-v" .GOFLAGS }} -coverprofile=coverage_race_unit.txt {{ default .DEFAULT_TARGETS .TARGETS }}

  check:
    desc: Check fmt and lint, `legacy` will be skipped
    cmds:
      - test -z $(go fmt {{ default .DEFAULT_TARGETS .TARGETS }})
      - go vet {{ default .DEFAULT_TARGETS .TARGETS }}
      - "'{{.GOLINTBIN}}' {{.GOLINTFLAGS}} {{ default .DEFAULT_TARGETS .TARGETS }}"
      - task: i18n:check
      - task: python:check
      - task: protoc:check

  python:check:
    desc: Linting for Python files
    cmds:
      - poetry install --no-root
      - poetry run flake8

  python:format:
    desc: Automatically formats Python files
    cmds:
      - poetry install --no-root
      - poetry run black .

  check-legacy:
    desc: Check fmt and lint for the `legacy` package
    cmds:
      - test -z $(go fmt ./legacy/...)
      - go vet ./legacy/...

  rpc-client:
    desc: Run the rpc client test routine (server must be already started)
    cmds:
      - go test -run TestWithClientE2E ./commands/daemon

  i18n:update:
    desc: Updates i18n files
    cmds:
      - go run ./i18n/cmd/main.go catalog generate . > ./i18n/data/en.po
      - task: i18n:generate

  i18n:pull:
    desc: Pull i18n files from transifex
    cmds:
      - go run ./i18n/cmd/main.go transifex pull ./i18n/data
      - task: i18n:generate

  i18n:push:
    desc: Push i18n files to transifex
    cmds:
      - go run ./i18n/cmd/main.go transifex push ./i18n/data

  i18n:check:
    desc: Check if the i18n message catalog was updated
    cmds:
      - task: i18n:update
      - git add -N ./i18n/data
      - git diff --exit-code ./i18n/data

  i18n:generate:
    desc: Generate embedded i18n catalog files
    cmds:
      - git add -N ./i18n/data
      - git diff --exit-code ./i18n/data &> /dev/null || { cd ./i18n && rice embed-go; }

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-mkdocs-task/Taskfile.yml
  website:check:
    desc: Check whether the MkDocs-based website will build
    deps:
      - task: docs:generate
      - task: poetry:install-deps
    cmds:
      - poetry run mkdocs build --strict

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-mkdocs-task/Taskfile.yml
  website:serve:
    desc: Run website locally
    deps:
      - task: docs:generate
      - task: poetry:install-deps
    cmds:
      - poetry run mkdocs serve

vars:
  PROJECT_NAME: "arduino-cli"
  DIST_DIR: "dist"
  # all modules of this project except for "legacy/..." module
  DEFAULT_TARGETS:
    sh: echo `go list ./... | grep -v legacy | tr '\n' ' '`
  # build vars
  COMMIT:
    sh: echo "$(git log --no-show-signature -n 1 --format=%h)"
  TIMESTAMP:
    sh: echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  TIMESTAMP_SHORT:
    sh: echo "{{now | date "20060102"}}"
  TAG:
    sh: echo "`git tag --points-at=HEAD 2> /dev/null | head -n1`"
  VERSION: "{{ if .NIGHTLY }}nightly-{{ .TIMESTAMP_SHORT }}{{ else if .TAG }}{{ .TAG }}{{ else }}{{ .PACKAGE_NAME_PREFIX }}git-snapshot{{ end }}"
  LDFLAGS: >
    -ldflags
    '
    -X github.com/arduino/arduino-cli/version.versionString={{.VERSION}}
    -X github.com/arduino/arduino-cli/version.commit={{ .COMMIT }}
    -X github.com/arduino/arduino-cli/version.date={{.TIMESTAMP}}
    '
  # test vars
  GOFLAGS: "-timeout 10m -v -coverpkg=./... -covermode=atomic"
  TEST_VERSION: "0.0.0-test.preview"
  TEST_COMMIT: "deadbeef"
  TEST_LDFLAGS: >
    -ldflags
    '
    -X github.com/arduino/arduino-cli/version.versionString={{.TEST_VERSION}}
    -X github.com/arduino/arduino-cli/version.commit={{.TEST_COMMIT}}
    -X github.com/arduino/arduino-cli/version.date={{.TIMESTAMP}}
    '
  # check-lint vars
  GOLINTBIN:
    sh: go list -f {{"{{"}}".Target{{"}}"}}" golang.org/x/lint/golint
  GOLINTFLAGS: "-min_confidence 0.8 -set_exit_status"
